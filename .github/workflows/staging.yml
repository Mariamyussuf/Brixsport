name: Staging Deployment

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Run linting
      run: npm run lint

    - name: Type check
      run: npx tsc --noEmit

  deploy-staging-frontend:
    runs-on: ubuntu-latest
    needs: test
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
        NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}

    - name: Deploy to Vercel Preview
      uses: vercel/action@v1
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-staging-backend:
    runs-on: ubuntu-latest
    needs: test
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'brixsport-backend/package-lock.json'

    - name: Install backend dependencies
      working-directory: ./brixsport-backend
      run: npm ci

    - name: Run backend tests
      working-directory: ./brixsport-backend
      run: npm test

    - name: Run database migrations (staging)
      working-directory: ./brixsport-backend
      run: npm run db:migrate
      env:
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

    - name: Build backend
      working-directory: ./brixsport-backend
      run: npm run build

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /var/www/brixsport-staging
          git pull origin develop
          npm ci --production
          npm run build
          pm2 restart brixsport-staging-api
          pm2 restart brixsport-staging-analytics

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging-frontend, deploy-staging-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Playwright
      run: npx playwright install

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        STAGING_URL: ${{ secrets.STAGING_FRONTEND_URL }}

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
